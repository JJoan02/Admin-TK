// admin-reporte.ts - Plugin mejorado y optimizado
// Categor√≠a: administration
// Funcionalidad: Administraci√≥n de grupos y moderaci√≥n
// Convertido autom√°ticamente a TypeScript con mejoras

import { BasePlugin } from '../base/BasePlugin.js';
import { InternalAPIService } from '../../api/InternalAPIService.js';

export class adminreportePlugin extends BasePlugin {
  constructor() {
    super({
      name: 'reporte',
      category: 'administration',
      description: 'Administraci√≥n de grupos y moderaci√≥n',
      usage: 'reporte <par√°metros>',
      aliases: ["report","reportar","bug","error"],
      permissions: ['user'],
      cooldown: 3000
    });
  }

  async execute(context: any): Promise<void> {
    const { message, args, reply, conn, text, usedPrefix, command } = context;
    const apiService = InternalAPIService.getInstance();

    try {
      if (!text) throw '‚ö† *_Ô∏èIngrese el error ue desea reportar._*'
          if (text.length < 10) throw '‚ö†Ô∏è *_Especifique bien el error, m√≠nimo 10 caracteres._*'
          if (text.length > 1000) throw '‚ö†Ô∏è *_M√°ximo 1000 caracteres para enviar el error._*'
          const teks = `‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚îÇ‚ä∑„Äò *R E P O R T E* ü§ç „Äô‚ä∑\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚îÇ‚Åñüß°Íô∞  *Cliente:*\n‚îÇ‚úèÔ∏è Wa.me/${m.sender.split`@`[0]
    } catch (error) {
      console.error(`Error en ${this.name}:`, error);
      await reply('‚ùå Ocurri√≥ un error al ejecutar el comando');
    }
  }
}

// Exportar para compatibilidad con sistema legacy
const handler = async (m: any, { conn, text, usedPrefix, command }: any) => {
  const plugin = new ReportePlugin();
  await plugin.execute({
    message: m,
    args: text?.split(' ') || [],
    reply: (msg: string) => conn.reply(m.chat, msg, m),
    conn,
    text,
    usedPrefix,
    command
  });
};

handler.command = [["report","reportar","bug","error"]];

export default handler;
